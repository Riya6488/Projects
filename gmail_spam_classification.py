# -*- coding: utf-8 -*-
"""Gmail_Spam_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E1oyrausrvITw6HnIr5o4MkL7DZnwglh
"""

pip install nltk

import nltk

nltk.download('wordnet')

import pandas as pd

df = pd.read_csv("spam.csv",encoding ='Windows-1252')

import chardet
with open("spam.csv",'rb') as rawdata:
  result = chardet.detect(rawdata.read(100000))
result

df.head()

df['spam']=df['type'].map({'spam':1,'ham':0}).astype(int)
df.head()

print("columns in the given data: ")
for col in df.columns:
  print(col)

t=len(df['type'])
print("No of rows in review column : ",t)
s=len(df['text'])
print("No of rows in liked column : ",s)

df['text'][1]

def tokenizer(text):
  return text.split()
df['text']=df['text'].apply(tokenizer)
df['text'][1]

from nltk.stem.snowball import SnowballStemmer
porter = SnowballStemmer("english")

def stem_it(text):
  return [porter.stem(word) for word in text]

df['text']=df['text'].apply(stem_it)
df['text'][1]

from nltk.stem import WordNetLemmatizer
lemmatizer = WordNetLemmatizer()

def lemmit_it(text):
  return [lemmatizer.lemmatize(word,pos="a")for word in text]

df['text']=df['text'].apply(lemmit_it)

df['text'][1]

from nltk.corpus import stopwords
stop_words = stopwords.words('english')

nltk.download('stopwords')

def stop_it(text):
  review=[word for word in text if not word in stop_words]
  return review

df['text']=df['text'].apply(stop_it)
df.head()

df['text']=df['text'].apply(''.join)

df.head()

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf=TfidfVectorizer()
y=df.spam.values
x=tfidf.fit_transform(df['text'])

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3)

from sklearn.linear_model import LogisticRegression
logmodel = LogisticRegression()
logmodel.fit(x_train,y_train)

predictions = logmodel.predict(x_test)
predictions

from sklearn.metrics import confusion_matrix,accuracy_score
cm = confusion_matrix(y_test,predictions)
ac = accuracy_score(y_test,predictions)*100
print(cm)
print(ac)

